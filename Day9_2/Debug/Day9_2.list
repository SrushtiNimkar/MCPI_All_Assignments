
Day9_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000668  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f0  080007f0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f0  080007f0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080007f0  080007f0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f0  080007f0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f0  080007f0  000017f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007f4  080007f4  000017f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007f8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000142c  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c8  00000000  00000000  0000345a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000011fc  00000000  00000000  00003d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a23  00000000  00000000  00004f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd97  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00092703  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000358  00000000  00000000  00092748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00092aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  00092abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007d8 	.word	0x080007d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080007d8 	.word	0x080007d8

080001c8 <LedInit>:

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <LedInit+0xac>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <LedInit+0xac>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <LedInit+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a21      	ldr	r2, [pc, #132]	@ (8000278 <LedInit+0xb0>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <LedInit+0xb0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1c      	ldr	r2, [pc, #112]	@ (8000278 <LedInit+0xb0>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <LedInit+0xb0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <LedInit+0xb0>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <LedInit+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LedInit+0xb0>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <LedInit+0xb0>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <LedInit+0xb0>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020c00 	.word	0x40020c00

0800027c <LedOn>:

void LedOn(uint32_t pin) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LedOn+0x28>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	2101      	movs	r1, #1
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <LedOn+0x28>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <LedOff>:

void LedOff(uint32_t pin) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <LedOff+0x28>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2101      	movs	r1, #1
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	43d2      	mvns	r2, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	@ (80002d0 <LedOff+0x28>)
 80002c2:	400b      	ands	r3, r1
 80002c4:	6153      	str	r3, [r2, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <LIS_WriteIO>:
 */

#include "lis3dsh.h"

// Accel IO Functions
void LIS_WriteIO(uint8_t reg, uint8_t data[], uint8_t size) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	6039      	str	r1, [r7, #0]
 80002de:	71fb      	strb	r3, [r7, #7]
 80002e0:	4613      	mov	r3, r2
 80002e2:	71bb      	strb	r3, [r7, #6]
	// enable slave
	SPI_CS_Enable();
 80002e4:	f000 f9dc 	bl	80006a0 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f9a6 	bl	800063c <SPI_Transmit>
	// write data byte(s)
	for(int i=0; i<size; i++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	e009      	b.n	800030a <LIS_WriteIO+0x36>
		SPI_Transmit(data[i]);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f99c 	bl	800063c <SPI_Transmit>
	for(int i=0; i<size; i++)
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	dbf1      	blt.n	80002f6 <LIS_WriteIO+0x22>
	// disable slave
	SPI_CS_Disable();
 8000312:	f000 f9d1 	bl	80006b8 <SPI_CS_Disable>
}
 8000316:	bf00      	nop
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <LIS_ReadIO>:

void LIS_ReadIO(uint8_t reg, uint8_t data[], uint8_t size) {
 800031e:	b580      	push	{r7, lr}
 8000320:	b084      	sub	sp, #16
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	6039      	str	r1, [r7, #0]
 8000328:	71fb      	strb	r3, [r7, #7]
 800032a:	4613      	mov	r3, r2
 800032c:	71bb      	strb	r3, [r7, #6]
	reg |= BV(7); /*bug fixed R=1 */
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000334:	71fb      	strb	r3, [r7, #7]
	// enable slave
	SPI_CS_Enable();
 8000336:	f000 f9b3 	bl	80006a0 <SPI_CS_Enable>
	// write register address
	SPI_Transmit(reg);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f97d 	bl	800063c <SPI_Transmit>
	// read data byte(s)
	for(int i=0; i<size; i++)
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	e00b      	b.n	8000360 <LIS_ReadIO+0x42>
		data[i] = SPI_Receive();
 8000348:	f000 f99c 	bl	8000684 <SPI_Receive>
 800034c:	4603      	mov	r3, r0
 800034e:	4619      	mov	r1, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	4413      	add	r3, r2
 8000356:	b2ca      	uxtb	r2, r1
 8000358:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	429a      	cmp	r2, r3
 8000366:	dbef      	blt.n	8000348 <LIS_ReadIO+0x2a>
	// disable slave
	SPI_CS_Disable();
 8000368:	f000 f9a6 	bl	80006b8 <SPI_CS_Disable>
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <LIS_Init>:

// Accel Init
void LIS_Init(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
	// Initialize SPI
	SPI_Init();
 800037a:	f000 f8df 	bl	800053c <SPI_Init>
	// Set Data rate and Enable axes
	uint8_t config[] = { (LIS_DATARATE_25 | LIS_XYZ_ENABLE) };
 800037e:	2347      	movs	r3, #71	@ 0x47
 8000380:	713b      	strb	r3, [r7, #4]
	LIS_WriteIO(LIS_CTRL_REG4_ADDR, config, 1);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2201      	movs	r2, #1
 8000386:	4619      	mov	r1, r3
 8000388:	2020      	movs	r0, #32
 800038a:	f7ff ffa3 	bl	80002d4 <LIS_WriteIO>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <LIS_GetData>:
// Accel Get Raw Data
LIS_Data LIS_GetData(void) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t x, y, z;
	// read x low and x high and combine to 16-bit x reading
	LIS_ReadIO(LIS_OUT_X_L_ADDR, data, 2);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2202      	movs	r2, #2
 80003a4:	4619      	mov	r1, r3
 80003a6:	2028      	movs	r0, #40	@ 0x28
 80003a8:	f7ff ffb9 	bl	800031e <LIS_ReadIO>
	x = ((uint16_t)data[1] << 8) | data[0];
 80003ac:	7c7b      	ldrb	r3, [r7, #17]
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	7c3b      	ldrb	r3, [r7, #16]
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	4313      	orrs	r3, r2
 80003b8:	b21b      	sxth	r3, r3
 80003ba:	82fb      	strh	r3, [r7, #22]
	// read y low and y high and combine to 16-bit y reading
	LIS_ReadIO(LIS_OUT_Y_L_ADDR, data, 2);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2202      	movs	r2, #2
 80003c2:	4619      	mov	r1, r3
 80003c4:	202a      	movs	r0, #42	@ 0x2a
 80003c6:	f7ff ffaa 	bl	800031e <LIS_ReadIO>
	y = ((uint16_t)data[1] << 8) | data[0];
 80003ca:	7c7b      	ldrb	r3, [r7, #17]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	b21a      	sxth	r2, r3
 80003d0:	7c3b      	ldrb	r3, [r7, #16]
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	4313      	orrs	r3, r2
 80003d6:	b21b      	sxth	r3, r3
 80003d8:	82bb      	strh	r3, [r7, #20]
	// read z low and z high and combine to 16-bit z reading
	LIS_ReadIO(LIS_OUT_Z_L_ADDR, data, 2);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2202      	movs	r2, #2
 80003e0:	4619      	mov	r1, r3
 80003e2:	202c      	movs	r0, #44	@ 0x2c
 80003e4:	f7ff ff9b 	bl	800031e <LIS_ReadIO>
	z = ((uint16_t)data[1] << 8) | data[0];
 80003e8:	7c7b      	ldrb	r3, [r7, #17]
 80003ea:	021b      	lsls	r3, r3, #8
 80003ec:	b21a      	sxth	r2, r3
 80003ee:	7c3b      	ldrb	r3, [r7, #16]
 80003f0:	b21b      	sxth	r3, r3
 80003f2:	4313      	orrs	r3, r2
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	827b      	strh	r3, [r7, #18]
	// fill readings in struct and return
	LIS_Data val;
	val.x = x;
 80003f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003fc:	813b      	strh	r3, [r7, #8]
	val.y = y;
 80003fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000402:	817b      	strh	r3, [r7, #10]
	val.z = z;
 8000404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000408:	81bb      	strh	r3, [r7, #12]
	return val;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	461a      	mov	r2, r3
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	6010      	str	r0, [r2, #0]
 8000416:	889b      	ldrh	r3, [r3, #4]
 8000418:	8093      	strh	r3, [r2, #4]
}
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <LIS_DRdy>:

// Accel if Ready
int LIS_DRdy(void) {
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
	uint8_t status;
	do {
		LIS_ReadIO(LIS_STATUS_ADDR, &status, 1);
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	2027      	movs	r0, #39	@ 0x27
 8000430:	f7ff ff75 	bl	800031e <LIS_ReadIO>
	} while( (status & LIS_STATUS_XYZ_Msk) == 0 );
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f003 0307 	and.w	r3, r3, #7
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f4      	beq.n	8000428 <LIS_DRdy+0x6>
	return 1;
 800043e:	2301      	movs	r3, #1
}
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000450:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <DelayMs+0x44>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <DelayMs+0x48>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <DelayMs+0x4c>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	099b      	lsrs	r3, r3, #6
 8000462:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	fb02 f303 	mul.w	r3, r2, r3
 800046c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800046e:	bf00      	nop
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <DelayMs+0x44>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	1ad2      	subs	r2, r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	d3f8      	bcc.n	8000470 <DelayMs+0x28>
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e0001000 	.word	0xe0001000
 8000490:	20000000 	.word	0x20000000
 8000494:	10624dd3 	.word	0x10624dd3

08000498 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
	int ret;
		LIS_Data val;
		SystemInit();
 800049e:	f000 f917 	bl	80006d0 <SystemInit>
		LIS_Init();
 80004a2:	f7ff ff67 	bl	8000374 <LIS_Init>

		LedInit(LED_BLUE);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f7ff fe8e 	bl	80001c8 <LedInit>
		LedInit(LED_GREEN);
 80004ac:	200c      	movs	r0, #12
 80004ae:	f7ff fe8b 	bl	80001c8 <LedInit>
		LedInit(LED_ORANGE);
 80004b2:	200d      	movs	r0, #13
 80004b4:	f7ff fe88 	bl	80001c8 <LedInit>
		LedInit(LED_RED);
 80004b8:	200e      	movs	r0, #14
 80004ba:	f7ff fe85 	bl	80001c8 <LedInit>

	DelayMs(1000);
 80004be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c2:	f7ff ffc1 	bl	8000448 <DelayMs>

	while(1) {
		ret = LIS_DRdy();
 80004c6:	f7ff ffac 	bl	8000422 <LIS_DRdy>
 80004ca:	60f8      	str	r0, [r7, #12]
				if(ret) {
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <main+0x2e>
					val = LIS_GetData();
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5e 	bl	8000396 <LIS_GetData>

					LedOff(LED_BLUE);
 80004da:	200f      	movs	r0, #15
 80004dc:	f7ff fee4 	bl	80002a8 <LedOff>
					LedOff(LED_GREEN);
 80004e0:	200c      	movs	r0, #12
 80004e2:	f7ff fee1 	bl	80002a8 <LedOff>
					LedOff(LED_ORANGE);
 80004e6:	200d      	movs	r0, #13
 80004e8:	f7ff fede 	bl	80002a8 <LedOff>
					LedOff(LED_RED);
 80004ec:	200e      	movs	r0, #14
 80004ee:	f7ff fedb 	bl	80002a8 <LedOff>

					if(val.x > 600)
 80004f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004f6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80004fa:	dd02      	ble.n	8000502 <main+0x6a>
						LedOn(LED_RED);
 80004fc:	200e      	movs	r0, #14
 80004fe:	f7ff febd 	bl	800027c <LedOn>
					if(val.x <-600)
 8000502:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000506:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800050a:	da02      	bge.n	8000512 <main+0x7a>
						LedOn(LED_GREEN);
 800050c:	200c      	movs	r0, #12
 800050e:	f7ff feb5 	bl	800027c <LedOn>
					if(val.y > 600)
 8000512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000516:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800051a:	dd02      	ble.n	8000522 <main+0x8a>
						LedOn(LED_ORANGE);
 800051c:	200d      	movs	r0, #13
 800051e:	f7ff fead 	bl	800027c <LedOn>
					if(val.y < -600)
 8000522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000526:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 800052a:	da02      	bge.n	8000532 <main+0x9a>
						LedOn(LED_BLUE);
 800052c:	200f      	movs	r0, #15
 800052e:	f7ff fea5 	bl	800027c <LedOn>


					DelayMs(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000536:	f7ff ff87 	bl	8000448 <DelayMs>
		ret = LIS_DRdy();
 800053a:	e7c4      	b.n	80004c6 <main+0x2e>

0800053c <SPI_Init>:
 *      Author: Nilesh
 */

#include "spi.h"

void SPI_Init(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	// SPI GPIO CS pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000540:	4b39      	ldr	r3, [pc, #228]	@ (8000628 <SPI_Init+0xec>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a38      	ldr	r2, [pc, #224]	@ (8000628 <SPI_Init+0xec>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOE->OSPEEDR &= ~BV(SPI_CS_PIN*2+1); // GPIO speed=Medium(0b01)
 800054c:	4b37      	ldr	r3, [pc, #220]	@ (800062c <SPI_Init+0xf0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a36      	ldr	r2, [pc, #216]	@ (800062c <SPI_Init+0xf0>)
 8000552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000556:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= BV(SPI_CS_PIN*2);
 8000558:	4b34      	ldr	r3, [pc, #208]	@ (800062c <SPI_Init+0xf0>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a33      	ldr	r2, [pc, #204]	@ (800062c <SPI_Init+0xf0>)
 800055e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000562:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2)); // GPIO No Pull-up/down (0b00)
 8000564:	4b31      	ldr	r3, [pc, #196]	@ (800062c <SPI_Init+0xf0>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4a30      	ldr	r2, [pc, #192]	@ (800062c <SPI_Init+0xf0>)
 800056a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800056e:	60d3      	str	r3, [r2, #12]
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);	// GPIO push-pull
 8000570:	4b2e      	ldr	r3, [pc, #184]	@ (800062c <SPI_Init+0xf0>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4a2d      	ldr	r2, [pc, #180]	@ (800062c <SPI_Init+0xf0>)
 8000576:	f023 0308 	bic.w	r3, r3, #8
 800057a:	6053      	str	r3, [r2, #4]
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1); // GPIO mode=OUTPUT(0b01)
 800057c:	4b2b      	ldr	r3, [pc, #172]	@ (800062c <SPI_Init+0xf0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a2a      	ldr	r2, [pc, #168]	@ (800062c <SPI_Init+0xf0>)
 8000582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000586:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SPI_Init+0xf0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SPI_Init+0xf0>)
 800058e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000592:	6013      	str	r3, [r2, #0]
	// Disable slave initially
	SPI_CS_Disable();
 8000594:	f000 f890 	bl	80006b8 <SPI_CS_Disable>

	// SPI GPIO MOSI, MISO, SCLK pin config
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SPI_Init+0xec>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059c:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <SPI_Init+0xec>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->OSPEEDR &= ~(BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1)); // GPIO speed=Medium(0b01)
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SPI_Init+0xf4>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SPI_Init+0xf4>)
 80005aa:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 80005ae:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SPI_Init+0xf4>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <SPI_Init+0xf4>)
 80005b6:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80005ba:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); // GPIO Pull-Down (0b10)
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <SPI_Init+0xf4>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000630 <SPI_Init+0xf4>)
 80005c2:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 80005c6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <SPI_Init+0xf4>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a18      	ldr	r2, [pc, #96]	@ (8000630 <SPI_Init+0xf4>)
 80005ce:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80005d2:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(SPI_MOSI_PIN)|BV(SPI_MISO_PIN)|BV(SPI_SCLK_PIN));
 80005d4:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <SPI_Init+0xf4>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <SPI_Init+0xf4>)
 80005da:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80005de:	6053      	str	r3, [r2, #4]
	
	// GPIO push-pull
	GPIOA->MODER &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2)); 
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <SPI_Init+0xf4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <SPI_Init+0xf4>)
 80005e6:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 80005ea:	6013      	str	r3, [r2, #0]
	
	// GPIO mode=AltFn(0b10)
	GPIOA->MODER |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <SPI_Init+0xf4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <SPI_Init+0xf4>)
 80005f2:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80005f6:	6013      	str	r3, [r2, #0]
	
	GPIOA->AFR[0] = (SPI_ALT_FN << GPIO_AFRL_AFSEL5_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL6_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL7_Pos);
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <SPI_Init+0xf4>)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <SPI_Init+0xf8>)
 80005fc:	621a      	str	r2, [r3, #32]

	// SPI bus config
	// Enable SPI clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <SPI_Init+0xec>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <SPI_Init+0xec>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000608:	6453      	str	r3, [r2, #68]	@ 0x44
	// CR1: Master=1, BR=0x02(010), LSBF=0, DFF=0 (8-bit), CRCEN=0,
	//		SSM=1 & SSI=1 (Soft Slave Manage), BIDI=0 and RXONLY=0 for Full Duplex,
	//		CPOL=0 and CPHA=0 for LIS3DSH
	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (0x02 << SPI_CR1_BR_Pos);
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <SPI_Init+0xfc>)
 800060c:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000610:	601a      	str	r2, [r3, #0]
	// CR2 = Motorola Frame, No intr enabled, No dma enabled, No SS output
	SPI1->CR2 = 0x0000;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <SPI_Init+0xfc>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SPI1->CR1 |= SPI_CR1_SPE; /*bug fixed |= */
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <SPI_Init+0xfc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <SPI_Init+0xfc>)
 800061e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40021000 	.word	0x40021000
 8000630:	40020000 	.word	0x40020000
 8000634:	55500000 	.word	0x55500000
 8000638:	40013000 	.word	0x40013000

0800063c <SPI_Transmit>:

uint16_t SPI_Transmit(uint8_t dataW) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	// wait while tx regr is not empty
	while(!(SPI1->SR & SPI_SR_TXE))
 8000646:	bf00      	nop
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <SPI_Transmit+0x44>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <SPI_Transmit+0xc>
		;
	// write given data into spi data regr
	uint32_t frame = dataW;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	60fb      	str	r3, [r7, #12]
	SPI1->DR = frame;
 8000658:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <SPI_Transmit+0x44>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	60d3      	str	r3, [r2, #12]
	// wait while rx regr is empty
	while(!(SPI1->SR & SPI_SR_RXNE))
 800065e:	bf00      	nop
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <SPI_Transmit+0x44>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f9      	beq.n	8000660 <SPI_Transmit+0x24>
		;
	// read data from spi data regr
	frame = SPI1->DR;
 800066c:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SPI_Transmit+0x44>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	60fb      	str	r3, [r7, #12]
	return frame;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	b29b      	uxth	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40013000 	.word	0x40013000

08000684 <SPI_Receive>:

uint16_t SPI_Receive(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	// send dummy data (0x00) and receive data from slave
	uint32_t val = SPI_Transmit(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ffd6 	bl	800063c <SPI_Transmit>
 8000690:	4603      	mov	r3, r0
 8000692:	607b      	str	r3, [r7, #4]
	// return received data
	return val;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SPI_CS_Enable>:

void SPI_CS_Enable(void) {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	// PE.3 = 0 (active low)
	GPIOE->BSRR = BV(SPI_CS_CLR_BIT);
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <SPI_CS_Enable+0x14>)
 80006a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006aa:	619a      	str	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <SPI_CS_Disable>:

void SPI_CS_Disable(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	// PE.3 = 1 (active low)
	GPIOE->BSRR = BV(SPI_CS_SET_BIT);
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <SPI_CS_Disable+0x14>)
 80006be:	2208      	movs	r2, #8
 80006c0:	619a      	str	r2, [r3, #24]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  DWT_Init();
 80006d4:	f000 f802 	bl	80006dc <DWT_Init>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <DWT_Init+0x58>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <DWT_Init+0x58>)
 80006e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006ea:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <DWT_Init+0x58>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a10      	ldr	r2, [pc, #64]	@ (8000734 <DWT_Init+0x58>)
 80006f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006f6:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <DWT_Init+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000738 <DWT_Init+0x5c>)
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <DWT_Init+0x5c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <DWT_Init+0x5c>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <DWT_Init+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000716:	bf00      	nop
    __ASM volatile ("NOP");
 8000718:	bf00      	nop
    __ASM volatile ("NOP");
 800071a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <DWT_Init+0x5c>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	bf0c      	ite	eq
 8000724:	2301      	moveq	r3, #1
 8000726:	2300      	movne	r3, #0
 8000728:	b2db      	uxtb	r3, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000edf0 	.word	0xe000edf0
 8000738:	e0001000 	.word	0xe0001000

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f7ff ffc6 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	@ (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f000 f811 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fe93 	bl	8000498 <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000780:	080007f8 	.word	0x080007f8
  ldr r2, =_sbss
 8000784:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000788:	20000020 	.word	0x20000020

0800078c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC_IRQHandler>
	...

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4d0d      	ldr	r5, [pc, #52]	@ (80007c8 <__libc_init_array+0x38>)
 8000794:	4c0d      	ldr	r4, [pc, #52]	@ (80007cc <__libc_init_array+0x3c>)
 8000796:	1b64      	subs	r4, r4, r5
 8000798:	10a4      	asrs	r4, r4, #2
 800079a:	2600      	movs	r6, #0
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	4d0b      	ldr	r5, [pc, #44]	@ (80007d0 <__libc_init_array+0x40>)
 80007a2:	4c0c      	ldr	r4, [pc, #48]	@ (80007d4 <__libc_init_array+0x44>)
 80007a4:	f000 f818 	bl	80007d8 <_init>
 80007a8:	1b64      	subs	r4, r4, r5
 80007aa:	10a4      	asrs	r4, r4, #2
 80007ac:	2600      	movs	r6, #0
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	080007f0 	.word	0x080007f0
 80007cc:	080007f0 	.word	0x080007f0
 80007d0:	080007f0 	.word	0x080007f0
 80007d4:	080007f4 	.word	0x080007f4

080007d8 <_init>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr

080007e4 <_fini>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	bf00      	nop
 80007e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ea:	bc08      	pop	{r3}
 80007ec:	469e      	mov	lr, r3
 80007ee:	4770      	bx	lr
